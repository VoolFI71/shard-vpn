import logging
import asyncio
from keyboards import get_user_keyboard
from aiogram import types, F
import aiosqlite
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    KeyboardButton, 
    ReplyKeyboardMarkup,
    LabeledPrice,
    Message
)
from datetime import datetime
from config import (
    TOKEN, 
    CHANNEL_ID, 
    WELCOME_GIF_URL,
    ADMIN_ID,
    PRICES,
    STARS_PROVIDER_TOKEN,
    ADMIN_IDS,
    MINIAPP_BASE_URL
)
from database import (
    init_db,
    check_user_payment,
    add_payment,
    get_user_data,
    get_vpn_config,
    add_bot_user,
    give_trial_subscription,
    has_trial
)
from payment import create_payment, check_payment_status
from yookassa import Payment
from keyboards import (
    create_main_keyboard,
    get_subscription_keyboard,
    get_payment_check_keyboard
)
from urllib.parse import quote

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
from admin_panel import register_admin_handlers
dp = Dispatcher()
register_admin_handlers(dp)

def get_price_for_period(period: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–Ω—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    return PRICES.get(period, PRICES['1']) // 100

# –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–≤—ë–∑–¥–∞—Ö (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ)
STARS_PRICES = {
    '1': 1,   # ~149‚ÇΩ
    '3': 1,   # ~399‚ÇΩ
    '6': 1,   # ~699‚ÇΩ
    '12': 1   # ~999‚ÇΩ
}

def get_stars_price(period: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    return STARS_PRICES.get(period, STARS_PRICES['1'])

async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        if user_id in ADMIN_IDS:
            return True
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    success = await add_bot_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    if success:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –±–æ—Ç–∞")
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –±–∞–∑—É –±–æ—Ç–∞")
    
    welcome_text = f"""üåê <b>–î–æ–±—Ä–æ –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Shard VPN ‚Äî —Ç–≤–æ–π –±—ã—Å—Ç—Ä—ã–π –∏ –Ω–∞–¥—ë–∂–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü!</b>

<blockquote><i>–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Ç–µ–±–µ —Å–≤–æ–±–æ–¥—É –≤ —Å–µ—Ç–∏ –∏ –∑–∞—â–∏—Ç—É –¥–∞–Ω–Ω—ã—Ö.</i></blockquote>
"""
    
    # –¢—Ä–∏–∞–ª –Ω–µ –≤—ã–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –§–∏–∫—Å–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ, —á—Ç–æ —Ç—Ä–∏–∞–ª–∞ –µ—â—ë –Ω–µ –±—ã–ª–æ
    try:
        already_has_trial = await has_trial(user.id)
    except Exception:
        already_has_trial = True

    await message.answer_animation(
        animation=WELCOME_GIF_URL,
        caption=welcome_text,
        reply_markup=create_main_keyboard()
    )

    # –î–ª—è —Ç—Ä–∏–∞–ª–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ—Ñ–µ—Ä —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ (–µ—Å–ª–∏ —Ç—Ä–∏–∞–ª –µ—â—ë –Ω–µ –≤—ã–¥–∞–≤–∞–ª—Å—è)
    if not already_has_trial:
        await ask_for_subscription(message)

async def ask_for_subscription(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç—å 14 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_sub')]
    ])
    
    await message.answer(
        text=(
            "<b>üéÅ –ü–æ–ª—É—á–∏—Ç–µ 14 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b>\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª ‚Äî –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–¥–∏–º –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        ),
        reply_markup=keyboard
    )

@dp.callback_query(F.data == 'check_sub')
async def check_subscription_callback(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    if await check_subscription(callback.from_user.id):
        # –í—ã–¥–∞–µ–º –ø—Ä–æ–±–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 14 –¥–Ω–µ–π
        try:
            success = await give_trial_subscription(callback.from_user.id, 14)
        except Exception as e:
            success = False
        await callback.message.delete()
        text = "<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!</b>\n\n"
        if success:
            text += "<b>üéÅ –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 14 –¥–Ω–µ–π.</b>"
        else:
            text += "<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø.</b> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        await callback.message.answer(
            text=text,
            reply_markup=create_main_keyboard(),
            message_effect_id="5046509860389126442"
        )
    else:
        await callback.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

# –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–≤—ë–∑–¥–∞—Ö (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ)
STARS_PRICES = {
    '1': 1,   # ~149‚ÇΩ
    '3': 1,   # ~399‚ÇΩ
    '6': 1,   # ~699‚ÇΩ
    '12': 1   # ~999‚ÇΩ
}

def get_stars_price(period: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    return STARS_PRICES.get(period, STARS_PRICES['1'])

async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        if user_id in ADMIN_IDS:
            return True
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
    success = await add_bot_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    if success:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –±–æ—Ç–∞")
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ –±–∞–∑—É –±–æ—Ç–∞")

    welcome_text = f"""
<b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã</b>

<b>üåç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Shard VPN</b> ‚Äì —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫, —Å–ª–µ–∂–∫–∏ –∏ —Ç–æ—Ä–º–æ–∑–æ–≤ –≤ —Å–µ—Ç–∏. –° –Ω–∞–º–∏ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–≤–æ–±–æ–¥—É, —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
"""
    
    if await check_subscription(user.id):
        await message.answer_animation(
            animation=WELCOME_GIF_URL,
            caption=welcome_text,
            reply_markup=create_main_keyboard()
        )
    else:
        await message.answer_animation(
            animation=WELCOME_GIF_URL,
            caption=welcome_text
        )
        await ask_for_subscription(message)

async def ask_for_subscription(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_ID[1:]}")],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_sub')]
    ])
    
    await message.answer(
        text=(
            "<b>üéÅ –ü–æ–ª—É—á–∏—Ç–µ 14 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b>\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª ‚Äî –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–¥–∏–º –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø."
        ),
        reply_markup=keyboard
    )

@dp.callback_query(F.data == 'check_sub')
async def check_subscription_callback(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    if await check_subscription(callback.from_user.id):
        await callback.message.delete()
        await callback.message.answer(
            text="<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!</b>",
            reply_markup=create_main_keyboard(),
            message_effect_id="5046509860389126442"
        )
    else:
        await callback.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@dp.message(F.text == "üåê–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å VPN")
async def connect_vpn(message: Message):
    user_id = message.from_user.id
    
    if await check_user_payment(user_id):
        user_data = await get_user_data(user_id)
        if user_data:
            expiry_date, config = user_data
            config_clean = str(config).strip('\"\'')
            vpn_config = f"vless://{config_clean}@146.103.102.21:443?type=tcp&security=reality&pbk=vouH_-SzPyt9HyyX7IuL0QTFppA1F8zkfWUUpLa2NEE&fp=chrome&sni=google.com&sid=47&flow=xtls-rprx-vision#1-a"
            # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –≤–Ω—É—Ç—Ä–∏ (URL-encoding –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
            encoded_config = quote(vpn_config, safe='')
            miniapp_link = f"{MINIAPP_BASE_URL}/u/{user_id}?config={encoded_config}"
            
            await message.answer(
                text=f"""
<b>üåê Shard VPN</b>

<b>üîó –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
<a href="{miniapp_link}">{miniapp_link}</a>

<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>{expiry_date}</code>
<b>–°—Ç–∞—Ç—É—Å:</b> <code>–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ</code>

<blockquote><i>üí° –ù–∞–∂–º–∏—Ç–µ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è" –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.</i></blockquote>
""",
                reply_markup=get_user_keyboard(True)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await show_subscription_options(message)
                                                
async def show_subscription_options(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await message.answer(
        text="""<b>üë®üèª‚Äçüíª–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è ‚Äî –≤—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É:</b>

<blockquote><i>üîê –ë—ã—Å—Ç—Ä—ã–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π VPN.</i></blockquote>
""",
        reply_markup=get_subscription_keyboard(),
    )

@dp.callback_query(F.data.startswith('sub_'))
async def subscription_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        period = callback.data.split('_')[1]
        
        payment_info = await create_payment(period, callback.from_user.id)
        if not payment_info:
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        payment_data = {
            'payment_id': payment_info['payment_id'],
            'user_id': callback.from_user.id,
            'message_id': callback.message.message_id,
            'chat_id': callback.message.chat.id,
            'period': payment_info['period']
        }
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        asyncio.create_task(check_payment_status(payment_data, bot))
        
        pay_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ÆKassa",
                url=payment_info['confirmation_url']
            )],
            [InlineKeyboardButton(
                text="üåü –û–ø–ª–∞—Ç–∏—Ç—å Stars",
                callback_data=f"pay_stars_{period}"
            )]
        ])

        await callback.message.edit_text(
            text=f'''<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {period} –º–µ—Å.</b>

<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b><code> {get_price_for_period(period)}‚ÇΩ</code>

<blockquote><i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:</i></blockquote>

            ''',
            reply_markup=pay_keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@dp.callback_query(F.data == 'back')
async def back_to_subscriptions(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        await callback.message.edit_text(
            text="""<b>üë®üèª‚Äçüíª–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è ‚Äî –≤—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É:</b>

<blockquote><i>üîê –ë—ã—Å—Ç—Ä—ã–π, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π VPN.</i></blockquote>
""",
            reply_markup=get_subscription_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        
@dp.callback_query(F.data.startswith('check_pay:'))
async def check_payment_callback(callback: types.CallbackQuery):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_id = callback.data.split(':')[1]
    
    try:
        payment = await Payment.find_one(payment_id)
        
        if payment.status == "succeeded":
            await callback.answer("–û–ø–ª–∞—Ç–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", show_alert=True)
        elif payment.status == "pending":
            await callback.answer(
                "–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )
        else:
            await callback.answer(
                f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status}",
                show_alert=True
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞",
            show_alert=True
        )

@dp.message(F.text == "üëæ–ê–∫–∫–∞—É–Ω—Ç")
async def profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    has_paid = await check_user_payment(user_id)
    status = "–∞–∫—Ç–∏–≤–Ω–∞" if has_paid else "–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    
    if has_paid:
        user_data = await get_user_data(user_id)
        if user_data:
            expiry_date, _ = user_data
            text = f"""
<b>üëæ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b><code> –∞–∫—Ç–∏–≤–Ω–∞ üü¢</code>
<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b><code> {expiry_date}</code>
"""
        else:
            text = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏"
    else:
        text = f"""
<b>üëæ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

<b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b> <code>–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ üî¥</code>

<blockquote><i>–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.</i></blockquote>
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    buttons = []
    if not has_paid:
        buttons.append([InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='subscribe_from_profile')])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ü–∏–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    buttons.append([InlineKeyboardButton(text="üî• –ê–∫—Ü–∏—è", callback_data='promo_action')])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer(text, reply_markup=reply_markup)

@dp.callback_query(F.data == 'promo_action')
async def promo_action_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–∫—Ü–∏–∏"""
    promo_text = """
üî• <b>–ü–æ–ª—É—á–∏—Ç–µ 14 –¥–Ω–µ–π VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∑–∞ —Å—Ç–æ—Ä–∏—Å –≤ Telegram!</b>

<b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
1. –û–ø—É–±–ª–∏–∫—É–π—Ç–µ —Å—Ç–æ—Ä–∏—Å —Å –Ω–∞—à–µ–π —Ä–µ—Ñ-—Å—Å—ã–ª–∫–æ–π –∏ –æ–¥–Ω–æ–π –∏–∑ –≥–æ—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫.
2. –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
3. –ü–æ–ª—É—á–∏—Ç–µ 2 –Ω–µ–¥–µ–ª–∏ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ! üéÅ

üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è —Å—Ç–æ—Ä–∏—Å:</b> t.me/SHARDPROB_bot

<blockquote><i>üìå –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑.</i></blockquote>
"""
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üñº –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data='get_promo_images')],
        [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/xmakedon")]
    ])
    
    await callback.message.answer(
        text=promo_text,
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == 'get_promo_images')
async def get_promo_images_callback(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–æ-–∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–∞–∫ —Ñ–∞–π–ª—ã –¥–ª—è –∞–∫—Ü–∏–∏"""
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å URL –∏–ª–∏ file_id –≤–∞—à–∏—Ö –ø—Ä–æ–º–æ-–∫–∞—Ä—Ç–∏–Ω–æ–∫
        image_urls = [
            "https://wallpapercat.com/w/full/d/c/9/126712-1080x1920-iphone-1080p-game-of-thrones-background.jpg",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ URL
            "https://wallpapercat.com/w/full/d/c/9/126712-1080x1920-iphone-1080p-game-of-thrones-background.jpg",
            "https://wallpapercat.com/w/full/d/c/9/126712-1080x1920-iphone-1080p-game-of-thrones-background.jpg"
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (—Ñ–∞–π–ª)
        for i, url in enumerate(image_urls, 1):
            await callback.message.answer_document(
                document=url,
                caption=f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ {i} –¥–ª—è –∞–∫—Ü–∏–∏",
            )
        
        await callback.answer("–§–∞–π–ª—ã —Å –ø—Ä–æ–º–æ-–º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–æ-—Ñ–∞–π–ª–æ–≤: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–æ–≤", show_alert=True)

@dp.callback_query(F.data == 'subscribe_from_profile')
async def subscribe_from_profile(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"""
    await show_subscription_options(callback.message)
    await callback.answer()

@dp.message(F.text == "üîí–û VPN")
async def info(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    await message.answer(
        text="""üåê <b>Shard VPN</b> ‚Äî –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Äî ‚ö°Ô∏è –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
‚Äî üîí –ü–æ–ª–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
‚Äî üéØ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ 1 –∫–ª–∏–∫

<blockquote><i>üì© –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏.</i></blockquote>""",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßë‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/xmakedon")]
        ])
    )

@dp.callback_query(F.data == 'instruction')
async def show_instructions(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é —Å –≤—ã–±–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    devices_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì± iOS", callback_data='instruction_ios')],
        [InlineKeyboardButton(text="ü§ñ Android", callback_data='instruction_android')],
        [InlineKeyboardButton(text="üíª Windows", callback_data='instruction_win')],
        [InlineKeyboardButton(text="üçé macOS", callback_data='instruction_mac')],
        [InlineKeyboardButton(text="üßë‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/xmakedon")]
    ])
    
    await callback.message.answer(
        text="""‚ö°Ô∏è <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é</b>

–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Äî –º—ã —Å—Ä–∞–∑—É –ø–æ–∫–∞–∂–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å.""",
        reply_markup=devices_keyboard
    )
    await callback.answer()

@dp.callback_query(F.data.startswith('instruction_'))
async def show_device_instructions(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    device = callback.data.split('_')[1]
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await get_user_data(user_id)
    if not user_data:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    expiry_date, config = user_data
    config_clean = str(config).strip('\"\'')
    vpn_config = f"vless://{config_clean}@89.111.142.122:443?security=reality&encryption=none&pbk=HCt07BSW3zdncQ4BFpr33wUxnZ7-WWhGNWHmXV-VsBA&headerType=none&fp=chrome&type=tcp&flow=xtls-rprx-vision&sni=google.com&sid=92643cc23109a57d#ShardVPN"
    encoded_config = quote(vpn_config, safe='')
    miniapp_link = f"{MINIAPP_BASE_URL}/u/{user_id}?config={encoded_config}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    if device in ['ios', 'android']:
        app_url = {
            'ios': 'https://apps.apple.com/ru/app/v2raytun/id6448898396',
            'android': 'https://play.google.com/store/apps/details?id=com.v2raytun.app'
        }.get(device)
        
        if app_url:
            buttons.append([InlineKeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å V2RayTun", url=app_url)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN" —Å deep link –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    deep_links = {
        'ios': f"v2raytun://import/{vpn_config}",
        'android': f"v2raytun://import/{vpn_config}",
        'win': f"v2raytun://import/{vpn_config}",
        'mac': f"v2raytun://import/{vpn_config}"
    }
    buttons.append([InlineKeyboardButton(text="üîå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN", url=deep_links.get(device, ''))])
    buttons.append([InlineKeyboardButton(text="üîó –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏–∞–ø–ø", url=miniapp_link)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    buttons.append([InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/xmakedon")])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    instructions = {
        'ios': f"""
<b>üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iOS:</b>

1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>V2RayTun</b> –∏–∑ App Store
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN" –Ω–∏–∂–µ
3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –¥–æ–±–∞–≤–∏—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
4. –í–∫–ª—é—á–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

<b>üîó –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
<a href="{miniapp_link}">{miniapp_link}</a>

<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>{expiry_date}</code>
""",
        'android': f"""
<b>ü§ñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android:</b>

1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ <b>V2RayTun</b> –∏–∑ Play Market
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN" –Ω–∏–∂–µ
3. –†–∞–∑—Ä–µ—à–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –¥–æ–±–∞–≤–∏—Ç—å VPN-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
4. –í–∫–ª—é—á–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏

<b>üîó –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
<a href="{miniapp_link}">{miniapp_link}</a>

<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>{expiry_date}</code>
""",
        'win': f"""
<b>üíª –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows:</b>

1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>V2RayTun</b> —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN" –Ω–∏–∂–µ
3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
4. –í–∫–ª—é—á–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ

<b>üîó –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
<a href="{miniapp_link}">{miniapp_link}</a>

<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>{expiry_date}</code>
""",
        'mac': f"""
<b>üçé –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è macOS:</b>

1. –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ <b>V2RayTun</b> –∏–∑ App Store
2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VPN" –Ω–∏–∂–µ
3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
4. –í–∫–ª—é—á–∏—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ

<b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:</b>
<code>{vpn_config}</code>

<b>üîó –ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
<a href="{miniapp_link}">{miniapp_link}</a>

<b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> <code>{expiry_date}</code>
"""
    }
    
    if device in instructions:
        await callback.message.answer(
            text=instructions[device],
            reply_markup=reply_markup
        )
    else:
        await callback.answer("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data == 'renew_sub')
async def renew_subscription(callback: types.CallbackQuery):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if await check_user_payment(user_id):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        await callback.message.answer(
            text="""<b>üîí–ü—Ä–æ–¥–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!</b>

<blockquote><i>–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:</i></blockquote>
""",
            reply_markup=get_subscription_keyboard()
        )
    else:
        await callback.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.",
            show_alert=True
        )
        await show_subscription_options(callback.message)
    
    await callback.answer()

# ----- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars -----
@dp.callback_query(F.data.startswith('pay_stars_'))
async def pay_stars_callback(callback: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –≤ Telegram Stars"""
    period = callback.data.split('_')[2]
    stars_price = get_stars_price(period)
    prices = [LabeledPrice(label=f"{period} –º–µ—Å.", amount=stars_price)]

    await bot.send_invoice(
        chat_id=callback.from_user.id,
        title="Shard VPN –ø–æ–¥–ø–∏—Å–∫–∞",
        description=f"{period} –º–µ—Å. –ø–æ–¥–ø–∏—Å–∫–∏",
        payload=f"stars_sub_{period}_{callback.from_user.id}",
        provider_token=STARS_PROVIDER_TOKEN,
        currency="XTR",
        prices=prices,
    )
    await callback.answer()

@dp.pre_checkout_query()
async def pre_checkout_query_handler(pre_checkout: types.PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –∑–≤—ë–∑–¥–∞–º–∏"""
    await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)

@dp.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Telegram Stars"""
    payload = message.successful_payment.invoice_payload
    if payload.startswith('stars_sub_'):
        try:
            _, _, period_str, user_id_str = payload.split('_')
            period = int(period_str)
            user_id = int(user_id_str)
        except ValueError:
            period = 1
            user_id = message.from_user.id

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        was_active = await check_user_payment(user_id)

        success = await add_payment(user_id, period)
        if not success:
            await message.answer("–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return

        user_data = await get_user_data(user_id)
        expiry_date = user_data[0] if user_data else "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"

        action_word = "–ø—Ä–æ–¥–ª–µ–Ω–∞" if was_active else "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
        await message.answer(
            text=f"""<b>‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>

<b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Shard VPN {action_word}!</b>

<b>–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:</b> {period} –º–µ—Å.
<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{expiry_date}</code>

<blockquote><i>üîπ –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.</i></blockquote>""",
            message_effect_id="5046509860389126442"
        )
async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(main())
    except KeyboardInterrupt:
        pass
    finally:
        loop.close()
