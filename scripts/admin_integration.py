# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
from aiogram import types, F
from aiogram.filters import Command
from datetime import datetime
from scripts.admin_handlers import (
    admin_command_handler,
    admin_stats_handler,
    admin_users_handler,
    admin_broadcast_handler,
    admin_manage_handler,
    is_admin
)

def register_admin_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    
    # –ö–æ–º–∞–Ω–¥–∞ /admin
    @dp.message(Command("admin"))
    async def admin_command(message: types.Message):
        await admin_command_handler(message)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    @dp.callback_query(F.data == "admin_stats")
    async def admin_stats_callback(callback: types.CallbackQuery):
        await admin_stats_handler(callback)
    
    @dp.callback_query(F.data == "admin_users")
    async def admin_users_callback(callback: types.CallbackQuery):
        await admin_users_handler(callback)
    
    @dp.callback_query(F.data == "admin_broadcast")
    async def admin_broadcast_callback(callback: types.CallbackQuery):
        await admin_broadcast_handler(callback)
    
    @dp.callback_query(F.data == "admin_manage")
    async def admin_manage_callback(callback: types.CallbackQuery):
        await admin_manage_handler(callback)
    
    @dp.callback_query(F.data == "admin_back_main")
    async def admin_back_main_callback(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        from scripts.admin_handlers import get_admin_main_keyboard, get_admin_stats
        stats = await get_admin_stats()
        
        admin_text = f"""
<b>üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Shard VPN</b>

<b>üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{stats['total_users']}</code>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <code>{stats['active_subs']}</code>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: <code>{stats['monthly_revenue']}‚ÇΩ</code>
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{stats['new_today']}</code>

<b>üïê –í—Ä–µ–º—è:</b> <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code>
"""
        
        await callback.message.edit_text(
            text=admin_text,
            reply_markup=get_admin_main_keyboard()
        )
    
    @dp.callback_query(F.data == "admin_close")
    async def admin_close_callback(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.delete()
        await callback.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")
    
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @dp.callback_query(F.data == "admin_find_user")
    async def admin_find_user_callback(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            text="<b>üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ])
        )
        
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    @dp.callback_query(F.data == "admin_active_users")
    async def admin_active_users_callback(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        import aiosqlite
        from config import DB_PATH
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                """SELECT user_id, expiry_date FROM users 
                   WHERE subscribed = 1 AND datetime(expiry_date, 'localtime') > datetime('now', 'localtime')
                   ORDER BY expiry_date DESC LIMIT 10"""
            )
            active_users = await cursor.fetchall()
        
        if not active_users:
            text = "<b>üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        else:
            text = "<b>üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)</b>\n\n"
            for user_id, expiry_date in active_users:
                text += f"‚Ä¢ ID: <code>{user_id}</code> –¥–æ <code>{expiry_date}</code>\n"
        
        await callback.message.edit_text(
            text=text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ])
        )
    
    # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
    @dp.callback_query(F.data == "broadcast_all")
    async def broadcast_all_callback(callback: types.CallbackQuery):
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.edit_text(
            text="""<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.

<blockquote><i>‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç –í–°–ï –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.</i></blockquote>""",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcast")]
            ])
        )
        
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π bot.py —Ñ–∞–π–ª
