import logging
import asyncio
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from config import ADMIN_ID, DB_PATH
from database import get_all_users, get_user_stats, delete_user, extend_user_subscription
import aiosqlite
from datetime import datetime, timedelta

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
ADMIN_IDS = [ADMIN_ID, 2057750889]  # –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ ID

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def get_admin_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin_manage"),
            InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="admin_logs")
        ],
        [
            InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")
        ]
    ])

def get_user_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_find_user"),
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data="admin_active_users")
        ],
        [
            InlineKeyboardButton(text="‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_expiring"),
            InlineKeyboardButton(text="‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ", callback_data="admin_blocked")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
        ]
    ])

def get_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞", callback_data="admin_restart"),
            InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤", callback_data="admin_clear_logs")
        ],
        [
            InlineKeyboardButton(text="üíæ –ë—ç–∫–∞–ø –ë–î", callback_data="admin_backup"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
        ]
    ])

async def admin_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
        return
    
    stats = await get_admin_stats()
    
    admin_text = f"""
<b>üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Shard VPN</b>

<b>üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{stats['total_users']}</code>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <code>{stats['active_subs']}</code>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: <code>{stats['monthly_revenue']}‚ÇΩ</code>
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{stats['new_today']}</code>

<b>üïê –í—Ä–µ–º—è:</b> <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code>
"""
    
    await message.answer(
        text=admin_text,
        reply_markup=get_admin_main_keyboard()
    )

async def admin_stats_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    stats = await get_detailed_stats()
    
    stats_text = f"""
<b>üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: <code>{stats['total_users']}</code>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <code>{stats['active_subs']}</code>
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <code>{stats['expired_subs']}</code>
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{stats['new_today']}</code>
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <code>{stats['new_week']}</code>

<b>üí∞ –§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{stats['revenue_today']}‚ÇΩ</code>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: <code>{stats['revenue_week']}‚ÇΩ</code>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: <code>{stats['revenue_month']}‚ÇΩ</code>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <code>{stats['avg_payment']}‚ÇΩ</code>

<b>üìà –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>
‚Ä¢ 1 –º–µ—Å—è—Ü: <code>{stats['subs_1m']}</code>
‚Ä¢ 3 –º–µ—Å—è—Ü–∞: <code>{stats['subs_3m']}</code>
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤: <code>{stats['subs_6m']}</code>
‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤: <code>{stats['subs_12m']}</code>
"""
    
    back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")]
    ])
    
    await callback.message.edit_text(
        text=stats_text,
        reply_markup=back_keyboard
    )

async def admin_users_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        text="<b>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_user_management_keyboard()
    )

async def admin_broadcast_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    broadcast_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all"),
            InlineKeyboardButton(text="üíé –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="broadcast_active")
        ],
        [
            InlineKeyboardButton(text="‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="broadcast_expiring"),
            InlineKeyboardButton(text="‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="broadcast_inactive")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
        ]
    ])
    
    await callback.message.edit_text(
        text="""
<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:

<blockquote><i>‚ö†Ô∏è –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</i></blockquote>
""",
        reply_markup=broadcast_keyboard
    )

async def admin_manage_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        text="<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_management_keyboard()
    )

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î

async def get_admin_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    async with aiosqlite.connect(DB_PATH) as conn:
        # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor = await conn.execute("SELECT COUNT(*) FROM users")
        total_users = (await cursor.fetchone())[0]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        cursor = await conn.execute(
            "SELECT COUNT(*) FROM users WHERE subscribed = 1 AND datetime(expiry_date, 'localtime') > datetime('now', 'localtime')"
        )
        active_subs = (await cursor.fetchone())[0]
        
        # –ù–æ–≤—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%d.%m.%Y')
        cursor = await conn.execute(
            "SELECT COUNT(*) FROM users WHERE DATE(payment_date) = DATE('now')"
        )
        new_today = (await cursor.fetchone())[0]
        
        return {
            'total_users': total_users,
            'active_subs': active_subs,
            'monthly_revenue': 0,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –∏–∑ –ø–ª–∞—Ç–µ–∂–µ–π
            'new_today': new_today
        }

async def get_detailed_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    async with aiosqlite.connect(DB_PATH) as conn:
        stats = {}
        
        # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor = await conn.execute("SELECT COUNT(*) FROM users")
        stats['total_users'] = (await cursor.fetchone())[0]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        cursor = await conn.execute(
            "SELECT COUNT(*) FROM users WHERE subscribed = 1 AND datetime(expiry_date, 'localtime') > datetime('now', 'localtime')"
        )
        stats['active_subs'] = (await cursor.fetchone())[0]
        
        # –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        cursor = await conn.execute(
            "SELECT COUNT(*) FROM users WHERE subscribed = 1 AND datetime(expiry_date, 'localtime') <= datetime('now', 'localtime')"
        )
        stats['expired_subs'] = (await cursor.fetchone())[0]
        
        # –ù–æ–≤—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor = await conn.execute(
            "SELECT COUNT(*) FROM users WHERE DATE(payment_date) = DATE('now')"
        )
        stats['new_today'] = (await cursor.fetchone())[0]
        
        # –ù–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é
        cursor = await conn.execute(
            "SELECT COUNT(*) FROM users WHERE DATE(payment_date) >= DATE('now', '-7 days')"
        )
        stats['new_week'] = (await cursor.fetchone())[0]
        
        # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats.update({
            'revenue_today': 0,
            'revenue_week': 0,
            'revenue_month': 0,
            'avg_payment': 0,
            'subs_1m': 0,
            'subs_3m': 0,
            'subs_6m': 0,
            'subs_12m': 0
        })
        
        return stats

async def get_all_users():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT user_id, subscribed, payment_date, expiry_date FROM users ORDER BY payment_date DESC"
        )
        return await cursor.fetchall()

async def extend_user_subscription(user_id: int, days: int):
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DB_PATH) as conn:
        cursor = await conn.execute(
            "SELECT expiry_date FROM users WHERE user_id = ?",
            (user_id,)
        )
        row = await cursor.fetchone()
        
        if row and row[0]:
            try:
                current_expiry = datetime.strptime(row[0], '%d.%m.%Y %H:%M')
                new_expiry = current_expiry + timedelta(days=days)
                
                await conn.execute(
                    "UPDATE users SET expiry_date = ? WHERE user_id = ?",
                    (new_expiry.strftime('%d.%m.%Y %H:%M'), user_id)
                )
                await conn.commit()
                return True
            except ValueError:
                return False
        return False

async def delete_user(user_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    async with aiosqlite.connect(DB_PATH) as conn:
        await conn.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
        await conn.commit()
        return True

async def extend_vpn_config(user_id: int, days: int) -> bool:
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    import asyncio  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(
                "SELECT config FROM users WHERE user_id=?",
                (user_id,)
            )
            row = await cursor.fetchone()
            if not row or not row[0]:
                logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è user_id={user_id}")
                return False
                
            config_id = row[0].strip('"\'')  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏
            
        import aiohttp  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç —Ç–æ–∂–µ
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "http://89.111.142.122:8080/extendconfig",
                json={
                    "time": days, 
                    "uid": config_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                },
                headers={"x-api-key": "999999999999"},
                timeout=10
            ) as resp:
                if resp.status != 200:
                    error = await resp.text()
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {resp.status} - {error}")
                    return False
                return True
                
    except asyncio.TimeoutError:
        logging.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞")
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ extend_vpn_config: {str(e)}", exc_info=True)
        return False
