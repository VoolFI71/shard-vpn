# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è VPN –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–µ–¥–∏–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
import logging
import asyncio
from aiogram import types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from config import ADMIN_ID, DB_PATH
import aiosqlite
from datetime import datetime, timedelta
from database import (
    get_user_stats, 
    get_payment_stats, 
    get_users_by_status, 
    find_user_by_id,
    extend_user_subscription,
    delete_user,
    block_user,
    unblock_user,
    give_user_subscription,
    deactivate_user_subscription,
    activate_user_subscription
)

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [ADMIN_ID, 2057750889]  # –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
admin_states = {}

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def get_admin_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ü–ª–∞—Ç–µ–∂–∏", callback_data="admin_payments"),
            InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
        ],
        [
            InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="admin_manage"),
            InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="admin_logs")
        ],
        [
            InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")
        ]
    ])

async def get_admin_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ (–∫—Ç–æ –∑–∞–ø—É—Å–∫–∞–ª /start)
            cursor = await conn.execute("SELECT COUNT(*) FROM bot_users")
            result = await cursor.fetchone()
            total_users = result[0] if result else 0
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
            cursor = await conn.execute(
                "SELECT user_id, subscribed, expiry_date FROM users"
            )
            all_vpn_users = await cursor.fetchall()
            
            active_subs = 0
            
            # –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            if all_vpn_users:
                for user_id, subscribed, expiry_date in all_vpn_users:
                    if subscribed and expiry_date and is_subscription_active_check(expiry_date):
                        active_subs += 1
            
            # –ù–æ–≤—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞)
            today = datetime.now().strftime('%d.%m.%Y')
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM bot_users WHERE first_interaction LIKE ?",
                (f"{today}%",)
            )
            result = await cursor.fetchone()
            new_today = result[0] if result else 0
            
            # –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü
            try:
                payment_stats = await get_payment_stats()
                monthly_revenue = payment_stats.get('revenue_month', 0)
            except:
                monthly_revenue = 0
        
        return {
            'total_users': total_users,
            'active_subs': active_subs,
            'monthly_revenue': monthly_revenue,
            'new_today': new_today
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'total_users': 0,
            'active_subs': 0,
            'monthly_revenue': 0,
            'new_today': 0
        }

async def get_detailed_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        async with aiosqlite.connect(DB_PATH) as conn:
            # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
            cursor = await conn.execute("SELECT COUNT(*) FROM bot_users")
            result = await cursor.fetchone()
            total_users = result[0] if result else 0
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            cursor = await conn.execute(
                "SELECT user_id, subscribed, payment_date, expiry_date FROM users"
            )
            all_vpn_users = await cursor.fetchall()
            
            active_subs = 0
            expired_subs = 0
            
            if all_vpn_users:
                for user_id, subscribed, payment_date, expiry_date in all_vpn_users:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
                    if subscribed and expiry_date:
                        if is_subscription_active_check(expiry_date):
                            active_subs += 1
                        else:
                            expired_subs += 1
            
            # –ù–æ–≤—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞)
            today = datetime.now().strftime('%d.%m.%Y')
            cursor = await conn.execute(
                "SELECT COUNT(*) FROM bot_users WHERE first_interaction LIKE ?",
                (f"{today}%",)
            )
            result = await cursor.fetchone()
            new_today = result[0] if result else 0
            
            # –ù–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é (–∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞)
            cursor = await conn.execute("SELECT user_id, first_interaction FROM bot_users")
            all_bot_users = await cursor.fetchall()
            
            new_week = 0
            if all_bot_users:
                week_ago = datetime.now() - timedelta(days=7)
                
                for user_id, first_interaction in all_bot_users:
                    if first_interaction:
                        try:
                            formats = ['%d.%m.%Y %H:%M', '%Y-%m-%d %H:%M:%S', '%Y-%m-%d']
                            for fmt in formats:
                                try:
                                    interaction_date = datetime.strptime(first_interaction, fmt)
                                    if interaction_date >= week_ago:
                                        new_week += 1
                                    break
                                except ValueError:
                                    continue
                        except:
                            pass
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
        try:
            payment_stats = await get_payment_stats()
        except:
            payment_stats = {
                'revenue_today': 0,
                'revenue_week': 0,
                'revenue_month': 0,
                'avg_payment': 0,
                'subs_1m': 0,
                'subs_3m': 0,
                'subs_6m': 0,
                'subs_12m': 0
            }
        
        return {
            'total_users': total_users,
            'active_subs': active_subs,
            'expired_subs': expired_subs,
            'new_today': new_today,
            'new_week': new_week,
            'revenue_today': payment_stats.get('revenue_today', 0),
            'revenue_week': payment_stats.get('revenue_week', 0),
            'revenue_month': payment_stats.get('revenue_month', 0),
            'avg_payment': payment_stats.get('avg_payment', 0),
            'subs_1m': payment_stats.get('subs_1m', 0),
            'subs_3m': payment_stats.get('subs_3m', 0),
            'subs_6m': payment_stats.get('subs_6m', 0),
            'subs_12m': payment_stats.get('subs_12m', 0)
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'total_users': 0,
            'active_subs': 0,
            'expired_subs': 0,
            'new_today': 0,
            'new_week': 0,
            'revenue_today': 0,
            'revenue_week': 0,
            'revenue_month': 0,
            'avg_payment': 0,
            'subs_1m': 0,
            'subs_3m': 0,
            'subs_6m': 0,
            'subs_12m': 0
        }

def is_subscription_active_check(expiry_date_str: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    if not expiry_date_str:
        return False
    
    try:
        formats = ['%d.%m.%Y %H:%M', '%Y-%m-%d %H:%M:%S', '%Y-%m-%d']
        for fmt in formats:
            try:
                expiry_date = datetime.strptime(expiry_date_str, fmt)
                return datetime.now() < expiry_date
            except ValueError:
                continue
        return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã {expiry_date_str}: {e}")
        return False

async def send_broadcast_message(bot, message_text: str = None, target_type: str = "all", photo_url: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ç–æ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if target_type == "all":
            query = "SELECT user_id FROM bot_users"  # –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
        elif target_type == "active":
            query = """SELECT user_id FROM users 
                       WHERE subscribed = 1"""
        elif target_type == "inactive":
            query = """SELECT user_id FROM bot_users 
                       WHERE user_id NOT IN (
                           SELECT user_id FROM users WHERE subscribed = 1
                       )"""
        elif target_type == "expiring":
            query = """SELECT user_id FROM users 
                       WHERE subscribed = 1"""
        else:
            return {"success": 0, "failed": 0, "blocked": 0}
        
        async with aiosqlite.connect(DB_PATH) as conn:
            cursor = await conn.execute(query)
            users = await cursor.fetchall()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö
        if target_type == "active":
            filtered_users = []
            for (user_id,) in users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
                cursor = await conn.execute(
                    "SELECT expiry_date FROM users WHERE user_id = ?",
                    (user_id,)
                )
                row = await cursor.fetchone()
                if row and row[0] and is_subscription_active_check(row[0]):
                    filtered_users.append((user_id,))
            users = filtered_users
        elif target_type == "expiring":
            filtered_users = []
            for (user_id,) in users:
                cursor = await conn.execute(
                    "SELECT expiry_date FROM users WHERE user_id = ?",
                    (user_id,)
                )
                row = await cursor.fetchone()
                if row and row[0]:
                    try:
                        formats = ['%d.%m.%Y %H:%M', '%Y-%m-%d %H:%M:%S', '%Y-%m-%d']
                        for fmt in formats:
                            try:
                                exp_date = datetime.strptime(row[0], fmt)
                                days_left = (exp_date - datetime.now()).days
                                if 0 <= days_left <= 3:
                                    filtered_users.append((user_id,))
                                break
                            except ValueError:
                                continue
                    except:
                        pass
            users = filtered_users
        
        success_count = 0
        failed_count = 0
        blocked_count = 0
        
        for (user_id,) in users:
            try:
                if photo_url:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
                    await bot.send_photo(
                        chat_id=user_id,
                        photo=photo_url,
                        caption=message_text,
                        parse_mode="HTML"
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await bot.send_message(
                        chat_id=user_id,
                        text=message_text,
                        parse_mode="HTML"
                    )
                success_count += 1
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                await asyncio.sleep(0.05)
                
            except Exception as e:
                if "blocked" in str(e).lower() or "forbidden" in str(e).lower():
                    blocked_count += 1
                else:
                    failed_count += 1
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        return {
            "success": success_count,
            "failed": failed_count,
            "blocked": blocked_count,
            "total": len(users)
        }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        return {"success": 0, "failed": 0, "blocked": 0}

def register_admin_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    
    @dp.message(Command("admin"))
    async def admin_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        if not is_admin(message.from_user.id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")
            return
        
        stats = await get_admin_stats()
        
        admin_text = f"""
<b>üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Shard VPN</b>

<b>üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{stats['total_users']}</code>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <code>{stats['active_subs']}</code>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: <code>{stats['monthly_revenue']}‚ÇΩ</code>
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{stats['new_today']}</code>

<b>üïê –í—Ä–µ–º—è:</b> <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code>
"""
        
        await message.answer(
            text=admin_text,
            reply_markup=get_admin_main_keyboard()
        )
    
    @dp.callback_query(F.data == "admin_stats")
    async def admin_stats_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        stats = await get_detailed_stats()
        
        stats_text = f"""
<b>üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: <code>{stats['total_users']}</code>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <code>{stats['active_subs']}</code>
‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <code>{stats['expired_subs']}</code>
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{stats['new_today']}</code>
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: <code>{stats['new_week']}</code>

<b>üí∞ –§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{stats['revenue_today']}‚ÇΩ</code>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é: <code>{stats['revenue_week']}‚ÇΩ</code>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: <code>{stats['revenue_month']}‚ÇΩ</code>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <code>{stats['avg_payment']}‚ÇΩ</code>

<b>üìà –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>
‚Ä¢ 1 –º–µ—Å—è—Ü: <code>{stats['subs_1m']}</code>
‚Ä¢ 3 –º–µ—Å—è—Ü–∞: <code>{stats['subs_3m']}</code>
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤: <code>{stats['subs_6m']}</code>
‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤: <code>{stats['subs_12m']}</code>
"""
        
        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")]
        ])
        
        await callback.message.edit_text(
            text=stats_text,
            reply_markup=back_keyboard
        )
    
    @dp.callback_query(F.data == "admin_users")
    async def admin_users_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        user_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_find_user"),
                InlineKeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_give_subscription")
            ],
            [
                InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö", callback_data="admin_active_users"),
                InlineKeyboardButton(text="‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_expiring")
            ],
            [
                InlineKeyboardButton(text="‚ùå –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="admin_expired"),
                InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞", callback_data="admin_all_bot_users")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
            ]
        ])
        
        await callback.message.edit_text(
            text="<b>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=user_keyboard
        )
    
    @dp.callback_query(F.data == "admin_find_user")
    async def admin_find_user_callback(callback: types.CallbackQuery):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        admin_states[callback.from_user.id] = "waiting_user_id"
        
        await callback.message.edit_text(
            text="<b>üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ])
        )
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
    @dp.message(F.text.regexp(r'^\d+$') & F.from_user.id.in_(ADMIN_IDS))
    async def handle_user_id_input(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¢–û–õ–¨–ö–û –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        state_value = admin_states.get(message.from_user.id)
        if state_value not in ("waiting_user_id", "waiting_user_id_for_subscription"):
            # –ù–µ –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏ –æ–±—ã—á–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞
            return
        if state_value == "waiting_user_id":
            user_id = int(message.text)
            user_data = await find_user_by_id(user_id)
            
            if user_data:
                user_id, subscribed, payment_date, expiry_date, config, last_update = user_data
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
                is_active = False
                if expiry_date:
                    try:
                        formats = ['%d.%m.%Y %H:%M', '%Y-%m-%d %H:%M:%S', '%Y-%m-%d']
                        for fmt in formats:
                            try:
                                exp_date = datetime.strptime(expiry_date, fmt)
                                is_active = exp_date > datetime.now()
                                break
                            except ValueError:
                                continue
                    except:
                        pass
                
                status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
                
                user_info = f"""
<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

<b>ID:</b> <code>{user_id}</code>
<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {status}
<b>–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</code>
<b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> <code>{expiry_date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</code>
<b>–ö–æ–Ω—Ñ–∏–≥:</b> <code>{config[:20] + '...' if config else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</code>
<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> <code>{last_update or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>
"""
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_data:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
                    if is_active:
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(text="‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 7 –¥–Ω–µ–π", callback_data=f"extend_user_{user_id}_7"),
                                InlineKeyboardButton(text="‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π", callback_data=f"extend_user_{user_id}_30")
                            ],
                            [
                                InlineKeyboardButton(text="üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"deactivate_user_{user_id}"),
                                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user_{user_id}")
                            ],
                            [
                                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
                            ]
                        ])
                    else:
                        # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(text="üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"activate_user_{user_id}"),
                                InlineKeyboardButton(text="‚ûï –ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 30 –¥–Ω–µ–π", callback_data=f"extend_user_{user_id}_30")
                            ],
                            [
                                InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_user_{user_id}"),
                                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
                            ]
                        ])
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ bot_users
                    async with aiosqlite.connect(DB_PATH) as conn:
                        cursor = await conn.execute(
                            "SELECT user_id, first_name FROM bot_users WHERE user_id = ?",
                            (user_id,)
                        )
                        bot_user = await cursor.fetchone()
                    
                    if bot_user:
                        user_info = f"""
<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

<b>ID:</b> <code>{user_id}</code>
<b>–ò–º—è:</b> <code>{bot_user[1] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</code>
<b>–°—Ç–∞—Ç—É—Å:</b> üî¥ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
<b>–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º:</b> ‚úÖ –ï—Å—Ç—å

<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç VPN –ø–æ–¥–ø–∏—Å–∫–∏</i>
"""
                        
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å 7 –¥–Ω–µ–π", callback_data=f"give_subscription_{user_id}_7"),
                                InlineKeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å 30 –¥–Ω–µ–π", callback_data=f"give_subscription_{user_id}_30")
                            ],
                            [
                                InlineKeyboardButton(text="üéÅ –í—ã–¥–∞—Ç—å 90 –¥–Ω–µ–π", callback_data=f"give_subscription_{user_id}_90"),
                                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
                            ]
                        ])
                        
                        await message.answer(user_info, reply_markup=keyboard)
                        admin_states.pop(message.from_user.id, None)
                        return
                
                await message.answer(user_info, reply_markup=keyboard)
            else:
                await message.answer(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
                    ])
                )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            admin_states.pop(message.from_user.id, None)
        elif state_value == "waiting_user_id_for_subscription":
            user_id = int(message.text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ bot_users
            async with aiosqlite.connect(DB_PATH) as conn:
                cursor = await conn.execute(
                    "SELECT user_id, first_name FROM bot_users WHERE user_id = ?",
                    (user_id,)
                )
                bot_user = await cursor.fetchone()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
                cursor = await conn.execute(
                    "SELECT user_id FROM users WHERE user_id = ?",
                    (user_id,)
                )
                has_subscription = await cursor.fetchone()
            
            if not bot_user:
                await message.answer(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –±–æ—Ç–∞.\n\n<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start</i>",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
                    ])
                )
            elif has_subscription:
                await message.answer(
                    f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞.\n\n<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π.</i>",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
                    ])
                )
            else:
                user_name = bot_user[1] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                subscription_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üéÅ 7 –¥–Ω–µ–π", callback_data=f"give_subscription_{user_id}_7"),
                        InlineKeyboardButton(text="üéÅ 30 –¥–Ω–µ–π", callback_data=f"give_subscription_{user_id}_30")
                    ],
                    [
                        InlineKeyboardButton(text="üéÅ 90 –¥–Ω–µ–π", callback_data=f"give_subscription_{user_id}_90"),
                        InlineKeyboardButton(text="üéÅ 365 –¥–Ω–µ–π", callback_data=f"give_subscription_{user_id}_365")
                    ],
                    [
                        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")
                    ]
                ])
                
                await message.answer(
                    f"<b>üéÅ –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name} (<code>{user_id}</code>)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:",
                    reply_markup=subscription_keyboard
                )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            admin_states.pop(message.from_user.id, None)
            return
    
    @dp.callback_query(F.data.startswith("extend_user_"))
    async def extend_user_callback(callback: types.CallbackQuery):
        """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            _, _, user_id, days = callback.data.split("_")
            user_id = int(user_id)
            days = int(days)
            
            success = await extend_user_subscription(user_id, days)
            
            if success:
                await callback.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π", show_alert=True)
            else:
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    @dp.callback_query(F.data.startswith("block_user_"))
    async def block_user_callback(callback: types.CallbackQuery):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            _, _, user_id = callback.data.split("_")
            user_id = int(user_id)
            
            success = await block_user(user_id)
            
            if success:
                await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            else:
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    @dp.callback_query(F.data.startswith("delete_user_"))
    async def delete_user_callback(callback: types.CallbackQuery):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            _, _, user_id = callback.data.split("_")
            user_id = int(user_id)
            
            success = await delete_user(user_id)
            
            if success:
                await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω", show_alert=True)
            else:
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    @dp.callback_query(F.data.startswith("give_subscription_"))
    async def give_subscription_callback(callback: types.CallbackQuery):
        """–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            _, _, user_id, days = callback.data.split("_")
            user_id = int(user_id)
            days = int(days)
            
            success = await give_user_subscription(user_id, days)
            
            if success:
                await callback.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π", show_alert=True)
            else:
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    @dp.callback_query(F.data.startswith("deactivate_user_"))
    async def deactivate_user_callback(callback: types.CallbackQuery):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            _, _, user_id = callback.data.split("_")
            user_id = int(user_id)
            
            success = await deactivate_user_subscription(user_id)
            
            if success:
                await callback.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", show_alert=True)
            else:
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

    @dp.callback_query(F.data.startswith("activate_user_"))
    async def activate_user_callback(callback: types.CallbackQuery):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            _, _, user_id = callback.data.split("_")
            user_id = int(user_id)
            
            success = await activate_user_subscription(user_id)
            
            if success:
                await callback.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", show_alert=True)
            else:
                await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}", show_alert=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    
    @dp.callback_query(F.data == "admin_active_users")
    async def admin_active_users_callback(callback: types.CallbackQuery):
        """–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            active_users = await get_users_by_status("active", 15)
            
            if not active_users:
                text = "<b>üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            else:
                text = "<b>üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15)</b>\n\n"
                for user_id, expiry_date in active_users:
                    text += f"‚Ä¢ ID: <code>{user_id}</code> –¥–æ <code>{expiry_date}</code>\n"
            
            await callback.message.edit_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
                ])
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    @dp.callback_query(F.data == "admin_expiring")
    async def admin_expiring_callback(callback: types.CallbackQuery):
        """–ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            expiring_users = await get_users_by_status("expiring", 15)
            
            if not expiring_users:
                text = "<b>‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–ù–µ—Ç –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è"
            else:
                text = "<b>‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è)</b>\n\n"
                for user_id, expiry_date in expiring_users:
                    text += f"‚Ä¢ ID: <code>{user_id}</code> –∏—Å—Ç–µ–∫–∞–µ—Ç <code>{expiry_date}</code>\n"
            
            await callback.message.edit_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
                ])
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    @dp.callback_query(F.data == "admin_expired")
    async def admin_expired_callback(callback: types.CallbackQuery):
        """–ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            expired_users = await get_users_by_status("expired", 15)
            
            if not expired_users:
                text = "<b>‚ùå –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"
            else:
                text = "<b>‚ùå –ò—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15)</b>\n\n"
                for user_id, expiry_date in expired_users:
                    text += f"‚Ä¢ ID: <code>{user_id}</code> –∏—Å—Ç–µ–∫–ª–∞ <code>{expiry_date}</code>\n"
            
            await callback.message.edit_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
                ])
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    @dp.callback_query(F.data == "admin_give_subscription")
    async def admin_give_subscription_callback(callback: types.CallbackQuery):
        """–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        admin_states[callback.from_user.id] = "waiting_user_id_for_subscription"
        
        await callback.message.edit_text(
            text="<b>üéÅ –í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ])
        )

    @dp.callback_query(F.data == "admin_all_bot_users")
    async def admin_all_bot_users_callback(callback: types.CallbackQuery):
        """–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            async with aiosqlite.connect(DB_PATH) as conn:
                cursor = await conn.execute(
                    """SELECT bu.user_id, bu.first_name, bu.first_interaction,
                          CASE WHEN u.user_id IS NOT NULL THEN 1 ELSE 0 END as has_subscription
                   FROM bot_users bu
                   LEFT JOIN users u ON bu.user_id = u.user_id
                   ORDER BY bu.first_interaction DESC LIMIT 15"""
                )
                all_bot_users = await cursor.fetchall()
            
            if not all_bot_users:
                text = "<b>üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞</b>\n\n–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            else:
                text = "<b>üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15)</b>\n\n"
                for user_id, first_name, first_interaction, has_subscription in all_bot_users:
                    status = "üíé" if has_subscription else "üë§"
                    name = first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                    text += f"{status} <code>{user_id}</code> - {name}\n"
                
                text += "\nüíé - –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞\nüë§ - —Ç–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞"
            
            await callback.message.edit_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_users")]
                ])
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    @dp.callback_query(F.data == "admin_payments")
    async def admin_payments_callback(callback: types.CallbackQuery):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        try:
            payment_stats = await get_payment_stats()
            
            payments_text = f"""
<b>üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</b>

<b>üìä –î–æ—Ö–æ–¥—ã:</b>
‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{payment_stats['revenue_today']}‚ÇΩ</code>
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: <code>{payment_stats['revenue_week']}‚ÇΩ</code>
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: <code>{payment_stats['revenue_month']}‚ÇΩ</code>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <code>{payment_stats['avg_payment']}‚ÇΩ</code>

<b>üìà –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>
‚Ä¢ 1 –º–µ—Å—è—Ü: <code>{payment_stats['subs_1m']}</code> —à—Ç.
‚Ä¢ 3 –º–µ—Å—è—Ü–∞: <code>{payment_stats['subs_3m']}</code> —à—Ç.
‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤: <code>{payment_stats['subs_6m']}</code> —à—Ç.
‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤: <code>{payment_stats['subs_12m']}</code> —à—Ç.
"""
            
            await callback.message.edit_text(
                text=payments_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")]
                ])
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    
    @dp.callback_query(F.data == "admin_broadcast")
    async def admin_broadcast_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        broadcast_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all"),
                InlineKeyboardButton(text="üíé –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="broadcast_active")
            ],
            [
                InlineKeyboardButton(text="‚è∞ –ò—Å—Ç–µ–∫–∞—é—â–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="broadcast_expiring"),
                InlineKeyboardButton(text="‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–º", callback_data="broadcast_inactive")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
            ]
        ])
        
        await callback.message.edit_text(
            text="""
<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:

<blockquote><i>‚ö†Ô∏è –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</i></blockquote>
""",
            reply_markup=broadcast_keyboard
        )
    
    @dp.callback_query(F.data == "admin_manage")
    async def admin_manage_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
    
        manage_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ë–î", callback_data="admin_clear_db"),
                InlineKeyboardButton(text="üíæ –ë—ç–∫–∞–ø –ë–î", callback_data="admin_backup_db")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞", callback_data="admin_restart_bot"),
                InlineKeyboardButton(text="üìä –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="admin_recalc_stats")
            ],
            [
                InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤", callback_data="admin_clear_logs"),
                InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
            ]
        ])
    
        await callback.message.edit_text(
            text="<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=manage_keyboard
        )

    @dp.callback_query(F.data == "admin_clear_db")
    async def admin_clear_db_callback(callback: types.CallbackQuery):
        """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
    
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_clear_db_confirm"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_manage")
            ]
        ])
    
        await callback.message.edit_text(
            text="""<b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!</b>

–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:
‚Ä¢ –í—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏
‚Ä¢ –í—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!</b>

–í—ã —É–≤–µ—Ä–µ–Ω—ã?""",
            reply_markup=confirm_keyboard
        )

    @dp.callback_query(F.data == "admin_clear_db_confirm")
    async def admin_clear_db_confirm_callback(callback: types.CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
    
        try:
            async with aiosqlite.connect(DB_PATH) as conn:
                await conn.execute("DELETE FROM users")
                await conn.execute("DELETE FROM bot_users")
                await conn.execute("DELETE FROM payments")
                await conn.commit()
        
            await callback.message.edit_text(
                text="‚úÖ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!</b>\n\n–í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="admin_back_main")]
                ])
            )
        
            await callback.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!", show_alert=True)
        
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ë–î", show_alert=True)

    @dp.callback_query(F.data == "admin_backup_db")
    async def admin_backup_db_callback(callback: types.CallbackQuery):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ë–î"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
    
        await callback.answer("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞... (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", show_alert=True)

    @dp.callback_query(F.data == "admin_restart_bot")
    async def admin_restart_bot_callback(callback: types.CallbackQuery):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
    
        await callback.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫... (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", show_alert=True)

    @dp.callback_query(F.data == "admin_recalc_stats")
    async def admin_recalc_stats_callback(callback: types.CallbackQuery):
        """–ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
    
        await callback.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞!", show_alert=True)
    
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats = await get_admin_stats()
    
        admin_text = f"""
<b>üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Shard VPN</b>

<b>üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{stats['total_users']}</code>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <code>{stats['active_subs']}</code>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: <code>{stats['monthly_revenue']}‚ÇΩ</code>
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{stats['new_today']}</code>

<b>üïê –í—Ä–µ–º—è:</b> <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code>
"""
    
        await callback.message.edit_text(
            text=admin_text,
            reply_markup=get_admin_main_keyboard()
        )

    @dp.callback_query(F.data == "admin_clear_logs")
    async def admin_clear_logs_callback(callback: types.CallbackQuery):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
    
        await callback.answer("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã! (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", show_alert=True)

    @dp.callback_query(F.data == "admin_settings")
    async def admin_settings_callback(callback: types.CallbackQuery):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
    
        await callback.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", show_alert=True)

    @dp.callback_query(F.data == "admin_logs")
    async def admin_logs_callback(callback: types.CallbackQuery):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
    
        logs_text = """
<b>üìã –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</b>

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:</b>
‚Ä¢ 15:30 - –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 123456789
‚Ä¢ 15:25 - –ü–ª–∞—Ç–µ–∂: 149‚ÇΩ –æ—Ç 987654321
‚Ä¢ 15:20 - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞
‚Ä¢ 15:15 - –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: 25 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

<i>–ü–æ–ª–Ω—ã–µ –ª–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ñ–∞–π–ª–µ bot.log</i>
"""
    
        await callback.message.edit_text(
            text=logs_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")]
            ])
        )
    
    @dp.callback_query(F.data == "admin_back_main")
    async def admin_back_main_callback(callback: types.CallbackQuery):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        stats = await get_admin_stats()
        
        admin_text = f"""
<b>üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Shard VPN</b>

<b>üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{stats['total_users']}</code>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: <code>{stats['active_subs']}</code>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: <code>{stats['monthly_revenue']}‚ÇΩ</code>
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{stats['new_today']}</code>

<b>üïê –í—Ä–µ–º—è:</b> <code>{datetime.now().strftime('%d.%m.%Y %H:%M')}</code>
"""
        
        await callback.message.edit_text(
            text=admin_text,
            reply_markup=get_admin_main_keyboard()
        )
    
    @dp.callback_query(F.data == "admin_close")
    async def admin_close_callback(callback: types.CallbackQuery):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        await callback.message.delete()
        await callback.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    @dp.callback_query(F.data.startswith("broadcast_"))
    async def broadcast_callback(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        if not is_admin(callback.from_user.id):
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        broadcast_type = callback.data.split("_")[1]
        
        type_names = {
            "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "active": "–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "inactive": "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
            "expiring": "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
        }
        
        admin_states[callback.from_user.id] = f"waiting_broadcast_{broadcast_type}"
        
        await callback.message.edit_text(
            text=f"""<b>üì¢ –†–∞—Å—Å—ã–ª–∫–∞ {type_names.get(broadcast_type, '–≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ')}</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.

<blockquote><i>‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã! –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.</i></blockquote>""",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_broadcast")]
            ])
        )
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ - —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Ç–æ–ª—å–∫–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    @dp.message((F.text | F.photo) & F.from_user.id.in_(ADMIN_IDS))
    async def handle_broadcast_message(message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ - –¢–û–õ–¨–ö–û –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
        state = admin_states.get(message.from_user.id, "")
        if not state.startswith("waiting_broadcast_"):
            # –ù–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Äî –≤—ã—Ö–æ–¥–∏–º
            return
        if state.startswith("waiting_broadcast_"):
            broadcast_type = state.split("_")[2]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            await message.answer("üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = None
            photo_url = None
            
            if message.photo:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
                photo_url = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                message_text = message.caption or ""
            else:
                # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                message_text = message.text
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            from bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
            result = await send_broadcast_message(bot, message_text, broadcast_type, photo_url)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_text = f"""
<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏</b>

<b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{result['success']}</code>
<b>–û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> <code>{result['failed']}</code>
<b>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞:</b> <code>{result['blocked']}</code>
<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{result.get('total', 0)}</code>
"""
            
            await message.answer(result_text)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            admin_states.pop(message.from_user.id, None)
